import ddf.minim.spi.*;
import ddf.minim.signals.*;
import ddf.minim.*;
import ddf.minim.analysis.*;
import ddf.minim.ugens.*;
import ddf.minim.effects.*;

import processing.opengl.*;
import SimpleOpenNI.*;
//due to the jerkiness of the motion in shift(), a flash should be implemented that covers up the abruptness of the shift
//suggest placing a rect over the entire screen at the end that has fill(x), with x decreasing in opacity to give it a flash effect.

//need to implement code to stop enemies from spawning on each other
//this is mostly done
PImage splash;
PImage bg_close;
PImage bg_mid;
PImage bg_far;
float bg_midX;
float bg_closeX;

color background;
player p;
boolean isPlaying;
boolean reset;
int score;
float enemySpeed;  //controls the speed of the enemies
float difficulty;  //acts as the speed ceiling for enemies
float shiftR;
float shiftL;
int spawnLag;
int missLag;      //basically the time remaining until the player can attack again after missing
float missOpacity;
ArrayList<Enemy> eListLeft;
ArrayList<Enemy> eListRight;
ArrayList<Background> bgList;  //should hold multiple instances of one background image so they can loop continuously

void setup()
{
  splash = loadImage("splash.jpg");
  bg_close = loadImage("bg_close.png");
  bg_mid = loadImage("bg_mid.png");
  bg_far = loadImage("bg_far.png");
  bg_closeX = 1200;
  bg_midX = 1200;
  
  background = color(60, 60, 70);
  background(background);
  size(1200, 600);
  fill(255);
  noStroke();
  smooth();
  rectMode(CENTER);
  imageMode(CENTER);
  isPlaying = false;
  reset = true;
  score = 0;
  enemySpeed = 1;
  difficulty = 3.3;
  shiftR = 0;
  shiftL = 0;
  missLag = 0;
  missOpacity = 0;
  p = new player();
  eListLeft = new ArrayList<Enemy>();
  eListRight = new ArrayList<Enemy>();
  bgList = new ArrayList<Background>();
  bgList.add(new Background("bgTexture.gif"));

}

void draw()
{
  println("reset: " + reset + " : isPlaying: " + isPlaying);
  if(!reset)
  {
    background(0);
    textMode(CENTER);
    fill(255);
    textSize(20);
    text("You lost :P", width/2 - 50, height/2 - 40);
    text("Score: " + score, width/2 - 40, height * 0.6);
    text("Press Enter to return to start screen", width/2 - 150, height * 0.7);
  }
  else if (!isPlaying && reset)
  {
    setup();
    image(splash, width/2, height/2);
    textSize(30);
    fill(0);
    text("PRESS UP TO BEGIN!!! WOW!", width  * .01, height * .98);
  }
  else
  {
    background(bg_far);
    imageMode(CORNER);
    image(bg_mid, bg_midX, 0, 1200, 600);
    image(bg_mid, bg_midX - 1200, 0, 1200, 600);
    imageMode(CENTER);
    textSize(15);

    //this next segment spawns the enemies
    if ((int)random(30) == 0 && spawnLag == 0)
    {
      if ((int)random(2) == 0)
      {
        boolean enemyLeft = false;
        for (Enemy e : eListRight)
        {
          if (e.x > -e.wide * 1.6 && e.x < e.wide * 1.6)
            enemyLeft = true;
        }
        if (!enemyLeft)
        {
          eListRight.add(new Enemy("RIGHT", enemySpeed));  //adds an enemy that spawn on the RIGHT facing LEFT
        }
      }
      
      
      else
      {
        boolean enemyRight = false;
        for (Enemy e : eListLeft)
        {
          if (e.x > width - (e.wide * 1.6) && e.x < width + (e.wide * 1.6))
            enemyRight = true;
        }
        if (!enemyRight)
        {
          eListLeft.add(new Enemy("LEFT", enemySpeed));  //adds an enemy that spawn on the LEFT facing RIGHT
        }
      }
      spawnLag = (int)(90 - difficulty * 10);
      if (spawnLag < 0)
        spawnLag = 0;
    }

    //goes through the list of enemies and renders them and then moves them
    //also flips them if they are facing the wrong direction
    for (Enemy e : eListLeft)
    {
      if (e != null)
      {
        if (e.wayFacing.equals("RIGHT") && e.x > p.playerX)
          e.wayFacing = "LEFT";
        if (e.wayFacing.equals("LEFT") && e.x < p.playerX)
          e.wayFacing = "RIGHT";
        e.speed = enemySpeed;
        e.render();
        e.tick();
      }
    }
    for (Enemy e : eListRight) //does the same as above
    {
      if (e != null)
      {
        if (e.wayFacing.equals("RIGHT") && e.x > p.playerX)
          e.wayFacing = "LEFT";
        if (e.wayFacing.equals("LEFT") && e.x < p.playerX)
          e.wayFacing = "RIGHT";
        e.speed = enemySpeed;
        e.render();
        e.tick();
      }
    }

    //next two segments cause enemies to attack when within range
    if (eListLeft.size() != 0 && eListLeft.get(0) != null)//if there's an enemy in the list
    {
      if (eListLeft.get(0).x <= p.playerX + eListLeft.get(0).wide)  //if the enemy reaches a certain range of the player (basically next to the player)
      {
        shiftR = p.range/4;
        //      shiftL = -p.range/4;
        enemySpeed = 0;
        if (difficulty > 3)
          difficulty -= 0.5;
        missLag = 20;
        p.health--;
        p.wayFacing = "RIGHT";
        score--;
      }
    }

    if (eListRight.size() != 0 && eListRight.get(0) != null)
    {
      if (eListRight.get(0).x >= p.playerX - eListRight.get(0).wide)  //if the enemy reaches a certain range of the player
      {
        //      shiftR = -p.range/4;
        shiftL = -p.range/4;
        enemySpeed = 0;
        if (difficulty > 3.5)
          difficulty -= 0.5;
        missLag = 20;
        p.health--;
        p.wayFacing = "LEFT";
        score--;
      }
    }


    //ENTERING THE TIMEZONE
    //Everything under here is more or less a timer

    //brings speed of enemies back up to its original amount (hardcoded at 2.5 for now)
    if (enemySpeed < difficulty)
    {
      if (enemySpeed < difficulty * 0.65)  //after it gets past a certain point it increments at a higher value
        enemySpeed += difficulty * 0.01;
      else 
        enemySpeed += difficulty * 0.1;
      if (enemySpeed > difficulty * 0.9 && enemySpeed < difficulty * 1.1) //if the enemy speed is within a certain range of the desired pace
        enemySpeed = difficulty; //this stops enemy speed from going above the value of difficulty
    }

    //prevents enemies from spawning on top of one another
    if (spawnLag > 0)
      spawnLag--;

    //acts as a timer counting down to when the player can attack again
    if (missLag > 0)
      missLag--;

    //decreases the miss opacity back to 0 if it's not already
    if (missOpacity > 0)
      missOpacity -= 5;

    fill(255);
    
    if (missOpacity > 0)  //displays text when the player misses
    {
      fill(255, 200, 200, missOpacity);
      pushMatrix();  //it wiggles around because screw priorities
      translate(random(width/3, width * 0.66), random(85, 95));
      rotate(PI * random(-1, 1));
      PImage img = loadImage("miss_text.gif");
      tint(255, missOpacity);  //changes the images opacity
      image(img, 0, 0, 200, 100);
      popMatrix();
    }
    tint(255, 255);
    p.render(); //v important
    
    imageMode(CORNER);
    image(bg_close, bg_closeX, height * 0.6, 1200, 254);
    image(bg_close, bg_closeX - 1200, height * 0.6, 1200, 254);
    imageMode(CENTER);
    
    if(bg_closeX < 0)
      bg_closeX = 1200;
    if(bg_closeX > width)
      bg_closeX = 0;
      
    if(bg_midX < 0)
      bg_midX = 1200;
    if(bg_midX > width)
      bg_midX = 0;
    
    textSize(30);
    text("Health: " + p.health, width/2 - 90, height * 0.78);
    text("Score: " + score, width - 130, 30);
    text("Difficulty: " + (int)(difficulty * 100), 10, 30);
    
    rectMode(CORNER);
    fill(255, 180, 180);
    rect(width/2 + 2, height/2 + 100, p.range - 2, 20);  //sets right range block
    fill(150, 200, 255);
    rect(width/2 - 2, height/2 + 100, -p.range + 2, 20);  //sets left range block
    rectMode(CENTER);  //sets rectMode back to it should be for rendering enemies

    if (shiftR > -1 || shiftR < 1 || shiftL > -1 || shiftL < 1)
    {
      float currShiftR = shiftR * .5;
      float currShiftL = shiftL * .5;
      shift(currShiftL, currShiftR);
      shiftR = shiftR - shiftR * .5;
      shiftL = shiftL - shiftL * .5;
      if (shiftR > -0.5 && shiftR < 0.5)
        shiftR = 0;
      if (shiftL > -0.5 && shiftL < 0.5)
        shiftL = 0;
    }

    if (p.health <= 0)
    {
      reset = false;
      isPlaying = false;
    }
  }
}


void keyPressed()
{
  if (isPlaying)
  {
    if (keyCode == RIGHT && missLag == 0)  //if right arrow is pressed and the player didn't just miss
    {
      if (eListLeft.size() > 0 && eListLeft.get(0) != null && eListLeft.get(0).x > p.playerX && eListLeft.get(0).x <= p.playerX + p.range)  //if there's an enemy and it's within range
      { 
        shiftR = p.playerX - eListLeft.get(0).x + eListLeft.get(0).wide;
        shiftL = p.playerX - eListLeft.get(0).x + eListLeft.get(0).wide;
        eListLeft.remove(0); //deletes the thing
        enemySpeed = difficulty/3;  //causes a short pause
        difficulty += .05;
        score++; //pretty self explanatory
      } else  //if there are no enemies in range and the player will miss
      {
        shiftR = -p.range;
        shiftL = -p.range;
        missOpacity = 255;  //make the miss text appear
        missLag = 40;  //stuns the player for a bit
      }
      p.wayFacing = "RIGHT";
    }

    if (keyCode == LEFT && missLag == 0)  //if left arrow is pressed and the player didn't just miss
    {
      if (eListRight.size() > 0 && eListRight.get(0) != null && eListRight.get(0).x < p.playerX && eListRight.get(0).x > p.playerX - p.range)  //if there's an enemy and it's within range
      {
        shiftR = p.playerX - eListRight.get(0).x - eListRight.get(0).wide;
        shiftL = p.playerX - eListRight.get(0).x - eListRight.get(0).wide;
        eListRight.remove(0); //deletes the thing
        enemySpeed = difficulty/3;  //causes a short pause
        difficulty += .05;
        score++; //pretty self explanitory
      } else  //if there are no enemies in range and the player will miss
      {
        shiftR = p.range;
        shiftL = p.range;
        missOpacity = 255;  //make the miss text appear
        missLag = 40;  //stuns the player for a bit
      }
      p.wayFacing = "LEFT";
    }
  }
  if (keyCode == UP)
  {
    isPlaying = true;
  }
    
  if(keyCode == ENTER)
    reset = true;
    
  if(keyCode == DOWN)
    p.health--;
}

void shift(float distL, float distR)
{
  for (Enemy e : eListLeft)
    e.x += distR; //dist can be negative, so it goes both ways
  for (Enemy e : eListRight)
    e.x += distL;
  bg_midX += (shiftR + shiftL)/10;
  bg_closeX += (shiftR + shiftL)/2;
}

//this method will shake by translating randomly each time it is called
//this method will take a boolean, which is initially false until some event in the main method makes it true
//when the taken boolean is true, shift() will be called in a random direction and some int will be set to a certain amount
//the main method will decrease the int until it is 0, at which point the screen is set back to normal and the boolean passed as an argument for this method will be set to false
//possible concern with smoothing down screen shake as it returns to normal
void screenShake(boolean isShake)
{
  //help
}

//for when the player loses
void lose()
{
  while(!reset)
  {
    background(0);
    
    text("You lost \n :P", width/2, height/2);
    text(score, width/2, height * 0.66);
    text("Press Enter to return to start screen", width/2, height * 0.75);
  }
  isPlaying = false;
}

//debugging methods
void mouseClicked()
{
  if (isPlaying)
  {
    if (mouseButton == RIGHT)
      eListLeft.add(new Enemy("LEFT"));
    if (mouseButton == LEFT)
      eListRight.add(new Enemy("RIGHT"));
    if (mouseButton == CENTER)
      difficulty += 0.5;
  }
}
